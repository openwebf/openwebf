// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use libc::boolean_t;
use crate::*;
#[repr(C)]
pub struct UIEventRustMethods {
  pub version: c_double,
  pub event: *const EventRustMethods,
  pub detail: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub view: extern "C" fn(ptr: *const OpaquePtr) -> RustValue<WindowRustMethods>,
  pub which: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
}
pub struct UIEvent {
  pub event: Event,
  method_pointer: *const UIEventRustMethods,
}
impl UIEvent {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const UIEventRustMethods, status: *const RustValueStatus) -> UIEvent {
    unsafe {
      UIEvent {
        event: Event::initialize(
          ptr,
          context,
          method_pointer.as_ref().unwrap().event,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.event.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.event.context()
  }
  pub fn detail(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).detail)(self.ptr())
    };
    value
  }
  pub fn view(&self) -> Window {
    let value = unsafe {
      ((*self.method_pointer).view)(self.ptr())
    };
    Window::initialize(value.value, self.context(), value.method_pointer, value.status)
  }
  pub fn which(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).which)(self.ptr())
    };
    value
  }
}
pub trait UIEventMethods: EventMethods {
  fn detail(&self) -> f64;
  fn view(&self) -> Window;
  fn which(&self) -> f64;
  fn as_ui_event(&self) -> &UIEvent;
}
impl UIEventMethods for UIEvent {
  fn detail(&self) -> f64 {
    self.detail()
  }
  fn view(&self) -> Window {
    self.view()
  }
  fn which(&self) -> f64 {
    self.which()
  }
  fn as_ui_event(&self) -> &UIEvent {
    self
  }
}
impl EventMethods for UIEvent {
  fn bubbles(&self) -> bool {
    self.event.bubbles()
  }
  fn cancel_bubble(&self) -> bool {
    self.event.cancel_bubble()
  }
  fn set_cancel_bubble(&self, value: bool, exception_state: &ExceptionState) -> Result<(), String> {
    self.event.set_cancel_bubble(value, exception_state)
  }
  fn cancelable(&self) -> bool {
    self.event.cancelable()
  }
  fn current_target(&self) -> EventTarget {
    self.event.current_target()
  }
  fn default_prevented(&self) -> bool {
    self.event.default_prevented()
  }
  fn src_element(&self) -> EventTarget {
    self.event.src_element()
  }
  fn target(&self) -> EventTarget {
    self.event.target()
  }
  fn is_trusted(&self) -> bool {
    self.event.is_trusted()
  }
  fn time_stamp(&self) -> f64 {
    self.event.time_stamp()
  }
  fn type_(&self) -> String {
    self.event.type_()
  }
  fn init_event(&self, type_: &str, bubbles: bool, cancelable: bool, exception_state: &ExceptionState) -> Result<(), String> {
    self.event.init_event(type_, bubbles, cancelable, exception_state)
  }
  fn prevent_default(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.event.prevent_default(exception_state)
  }
  fn stop_immediate_propagation(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.event.stop_immediate_propagation(exception_state)
  }
  fn stop_propagation(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.event.stop_propagation(exception_state)
  }
  fn as_event(&self) -> &Event {
    &self.event
  }
}