// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
enum MutationObserverRegistrationType {
  MutationObserverRegistration = 0,
}
#[repr(C)]
pub struct MutationObserverRegistrationRustMethods {
  pub version: c_double,
  pub release: extern "C" fn(ptr: *const OpaquePtr) -> c_void,
  pub dynamic_to: extern "C" fn(ptr: *const OpaquePtr, type_: MutationObserverRegistrationType) -> RustValue<c_void>,
}
pub struct MutationObserverRegistration {
  pub ptr: *const OpaquePtr,
  context: *const ExecutingContext,
  method_pointer: *const MutationObserverRegistrationRustMethods,
  status: *const RustValueStatus
}
impl MutationObserverRegistration {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const MutationObserverRegistrationRustMethods, status: *const RustValueStatus) -> MutationObserverRegistration {
    MutationObserverRegistration {
      ptr,
      context,
      method_pointer,
      status
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.ptr
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    assert!(!self.context.is_null(), "Context PTR must not be null");
    unsafe { &*self.context }
  }
}
impl Drop for MutationObserverRegistration {
  fn drop(&mut self) {
    unsafe {
      ((*self.method_pointer).release)(self.ptr());
    }
  }
}
pub trait MutationObserverRegistrationMethods {
  fn as_mutation_observer_registration(&self) -> &MutationObserverRegistration;
}
impl MutationObserverRegistrationMethods for MutationObserverRegistration {
  fn as_mutation_observer_registration(&self) -> &MutationObserverRegistration {
    self
  }
}
