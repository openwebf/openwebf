// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
enum DOMStringMapType {
  DOMStringMap = 0,
}
#[repr(C)]
pub struct DOMStringMapRustMethods {
  pub version: c_double,
  pub release: extern "C" fn(ptr: *const OpaquePtr) -> c_void,
  pub dynamic_to: extern "C" fn(ptr: *const OpaquePtr, type_: DOMStringMapType) -> RustValue<c_void>,
}
pub struct DOMStringMap {
  pub ptr: *const OpaquePtr,
  context: *const ExecutingContext,
  method_pointer: *const DOMStringMapRustMethods,
  status: *const RustValueStatus
}
impl DOMStringMap {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const DOMStringMapRustMethods, status: *const RustValueStatus) -> DOMStringMap {
    DOMStringMap {
      ptr,
      context,
      method_pointer,
      status
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.ptr
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    assert!(!self.context.is_null(), "Context PTR must not be null");
    unsafe { &*self.context }
  }
}
impl Drop for DOMStringMap {
  fn drop(&mut self) {
    unsafe {
      ((*self.method_pointer).release)(self.ptr());
    }
  }
}
pub trait DOMStringMapMethods {
  fn as_dom_string_map(&self) -> &DOMStringMap;
}
impl DOMStringMapMethods for DOMStringMap {
  fn as_dom_string_map(&self) -> &DOMStringMap {
    self
  }
}
