// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
enum CSSStyleDeclarationType {
  CSSStyleDeclaration = 0,
}
#[repr(C)]
pub struct CSSStyleDeclarationRustMethods {
  pub version: c_double,
  pub css_text: extern "C" fn(ptr: *const OpaquePtr) -> *const c_char,
  pub set_css_text: extern "C" fn(ptr: *const OpaquePtr, value: *const c_char, exception_state: *const OpaquePtr) -> bool,
  pub dup_css_text: extern "C" fn(ptr: *const OpaquePtr) -> *const c_char,
  pub length: extern "C" fn(ptr: *const OpaquePtr) -> i64,
  pub get_property_value: extern "C" fn(ptr: *const OpaquePtr, *const c_char, exception_state: *const OpaquePtr) -> *const c_char,
  pub set_property: extern "C" fn(ptr: *const OpaquePtr, *const c_char, NativeValue, exception_state: *const OpaquePtr) -> c_void,
  pub remove_property: extern "C" fn(ptr: *const OpaquePtr, *const c_char, exception_state: *const OpaquePtr) -> *const c_char,
  pub release: extern "C" fn(ptr: *const OpaquePtr) -> c_void,
  pub dynamic_to: extern "C" fn(ptr: *const OpaquePtr, type_: CSSStyleDeclarationType) -> RustValue<c_void>,
}
pub struct CSSStyleDeclaration {
  pub ptr: *const OpaquePtr,
  context: *const ExecutingContext,
  method_pointer: *const CSSStyleDeclarationRustMethods,
  status: *const RustValueStatus
}
impl CSSStyleDeclaration {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const CSSStyleDeclarationRustMethods, status: *const RustValueStatus) -> CSSStyleDeclaration {
    CSSStyleDeclaration {
      ptr,
      context,
      method_pointer,
      status
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.ptr
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    assert!(!self.context.is_null(), "Context PTR must not be null");
    unsafe { &*self.context }
  }
  pub fn css_text(&self) -> String {
    let value = unsafe {
      ((*self.method_pointer).css_text)(self.ptr())
    };
    let value = unsafe { std::ffi::CStr::from_ptr(value) };
    value.to_str().unwrap().to_string()
  }
  pub fn set_css_text(&self, value: String, exception_state: &ExceptionState) -> Result<(), String> {
    unsafe {
      ((*self.method_pointer).set_css_text)(self.ptr(), CString::new(value).unwrap().as_ptr(), exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    Ok(())
  }
  pub fn length(&self) -> i64 {
    let value = unsafe {
      ((*self.method_pointer).length)(self.ptr())
    };
    value
  }
  pub fn get_property_value(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String> {
    let value = unsafe {
      ((*self.method_pointer).get_property_value)(self.ptr(), CString::new(property).unwrap().as_ptr(), exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    let value = unsafe { std::ffi::CStr::from_ptr(value) };
    Ok(value.to_str().unwrap().to_string())
  }
  pub fn set_property(&self, property: &str, value: NativeValue, exception_state: &ExceptionState) -> Result<(), String> {
    unsafe {
      ((*self.method_pointer).set_property)(self.ptr(), CString::new(property).unwrap().as_ptr(), value, exception_state.ptr);
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    Ok(())
  }
  pub fn remove_property(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String> {
    let value = unsafe {
      ((*self.method_pointer).remove_property)(self.ptr(), CString::new(property).unwrap().as_ptr(), exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    let value = unsafe { std::ffi::CStr::from_ptr(value) };
    Ok(value.to_str().unwrap().to_string())
  }
}
impl Drop for CSSStyleDeclaration {
  fn drop(&mut self) {
    unsafe {
      ((*self.method_pointer).release)(self.ptr());
    }
  }
}
pub trait CSSStyleDeclarationMethods {
  fn css_text(&self) -> String;
  fn set_css_text(&self, value: String, exception_state: &ExceptionState) -> Result<(), String>;
  fn length(&self) -> i64;
  fn get_property_value(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String>;
  fn set_property(&self, property: &str, value: NativeValue, exception_state: &ExceptionState) -> Result<(), String>;
  fn remove_property(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String>;
  fn as_css_style_declaration(&self) -> &CSSStyleDeclaration;
}
impl CSSStyleDeclarationMethods for CSSStyleDeclaration {
  fn css_text(&self) -> String {
    self.css_text()
  }
  fn set_css_text(&self, value: String, exception_state: &ExceptionState) -> Result<(), String> {
    self.set_css_text(value, exception_state)
  }
  fn length(&self) -> i64 {
    self.length()
  }
  fn get_property_value(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String> {
    self.get_property_value(property, exception_state)
  }
  fn set_property(&self, property: &str, value: NativeValue, exception_state: &ExceptionState) -> Result<(), String> {
    self.set_property(property, value, exception_state)
  }
  fn remove_property(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String> {
    self.remove_property(property, exception_state)
  }
  fn as_css_style_declaration(&self) -> &CSSStyleDeclaration {
    self
  }
}
