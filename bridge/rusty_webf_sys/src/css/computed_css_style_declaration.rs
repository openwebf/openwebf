// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
pub struct ComputedCssStyleDeclarationRustMethods {
  pub version: c_double,
  pub css_style_declaration: CSSStyleDeclarationRustMethods,
}
pub struct ComputedCssStyleDeclaration {
  pub css_style_declaration: CSSStyleDeclaration,
  method_pointer: *const ComputedCssStyleDeclarationRustMethods,
}
impl ComputedCssStyleDeclaration {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const ComputedCssStyleDeclarationRustMethods, status: *const RustValueStatus) -> ComputedCssStyleDeclaration {
    unsafe {
      ComputedCssStyleDeclaration {
        css_style_declaration: CSSStyleDeclaration::initialize(
          ptr,
          context,
          &(method_pointer).as_ref().unwrap().css_style_declaration,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.css_style_declaration.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.css_style_declaration.context()
  }
}
pub trait ComputedCssStyleDeclarationMethods: CSSStyleDeclarationMethods {
  fn as_computed_css_style_declaration(&self) -> &ComputedCssStyleDeclaration;
}
impl ComputedCssStyleDeclarationMethods for ComputedCssStyleDeclaration {
  fn as_computed_css_style_declaration(&self) -> &ComputedCssStyleDeclaration {
    self
  }
}
impl CSSStyleDeclarationMethods for ComputedCssStyleDeclaration {
  fn css_text(&self) -> String {
    self.css_style_declaration.css_text()
  }
  fn set_css_text(&self, value: String, exception_state: &ExceptionState) -> Result<(), String> {
    self.css_style_declaration.set_css_text(value, exception_state)
  }
  fn length(&self) -> i64 {
    self.css_style_declaration.length()
  }
  fn get_property_value(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String> {
    self.css_style_declaration.get_property_value(property, exception_state)
  }
  fn set_property(&self, property: &str, value: NativeValue, exception_state: &ExceptionState) -> Result<(), String> {
    self.css_style_declaration.set_property(property, value, exception_state)
  }
  fn remove_property(&self, property: &str, exception_state: &ExceptionState) -> Result<String, String> {
    self.css_style_declaration.remove_property(property, exception_state)
  }
  fn as_css_style_declaration(&self) -> &CSSStyleDeclaration {
    &self.css_style_declaration
  }
}
